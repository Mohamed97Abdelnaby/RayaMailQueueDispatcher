<Activity mc:Ignorable="sap sap2010" x:Class="MasterMailIteration" xmlns="http://schemas.microsoft.com/netfx/2009/xaml/activities" xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" xmlns:s="clr-namespace:System;assembly=System.Private.CoreLib" xmlns:sap="http://schemas.microsoft.com/netfx/2009/xaml/activities/presentation" xmlns:sap2010="http://schemas.microsoft.com/netfx/2010/xaml/activities/presentation" xmlns:sc="clr-namespace:System.Collections;assembly=System.Private.CoreLib" xmlns:scg="clr-namespace:System.Collections.Generic;assembly=System.Private.CoreLib" xmlns:sco="clr-namespace:System.Collections.ObjectModel;assembly=System.Private.CoreLib" xmlns:sn="clr-namespace:System.Net;assembly=System.Net.Primitives" xmlns:snm="clr-namespace:System.Net.Mail;assembly=System.Net.Mail" xmlns:ui="http://schemas.uipath.com/workflow/activities" xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml">
  <x:Members>
    <x:Property Name="in_Config" Type="InArgument(scg:Dictionary(x:String, x:Object))" />
    <x:Property Name="in_ListOfMails" Type="InArgument(scg:List(snm:MailMessage))" />
    <x:Property Name="in_EachProcessSpecialConfig" Type="InArgument(scg:Dictionary(x:String, scg:Dictionary(x:String, x:Object)))" />
    <x:Property Name="in_ProcessesCodesWFsMapping" Type="InArgument(scg:Dictionary(x:String, x:String))" />
    <x:Property Name="BreakTriggerScopeInArgument" Type="InArgument(x:String)" />
  </x:Members>
  <sap2010:ExpressionActivityEditor.ExpressionActivityEditor>C#</sap2010:ExpressionActivityEditor.ExpressionActivityEditor>
  <sap:VirtualizedContainerService.HintSize>824,1686.4</sap:VirtualizedContainerService.HintSize>
  <sap2010:WorkflowViewState.IdRef>ActivityBuilder_1</sap2010:WorkflowViewState.IdRef>
  <TextExpression.NamespacesForImplementation>
    <sco:Collection x:TypeArguments="x:String">
      <x:String>GlobalConstantsNamespace</x:String>
      <x:String>GlobalVariablesNamespace</x:String>
      <x:String>Microsoft.VisualBasic</x:String>
      <x:String>Microsoft.VisualBasic.Activities</x:String>
      <x:String>System</x:String>
      <x:String>System.Activities</x:String>
      <x:String>System.Activities.Expressions</x:String>
      <x:String>System.Activities.Runtime.Collections</x:String>
      <x:String>System.Activities.Statements</x:String>
      <x:String>System.Activities.Validation</x:String>
      <x:String>System.Activities.XamlIntegration</x:String>
      <x:String>System.Collections</x:String>
      <x:String>System.Collections.Generic</x:String>
      <x:String>System.Collections.ObjectModel</x:String>
      <x:String>System.Data</x:String>
      <x:String>System.Diagnostics</x:String>
      <x:String>System.Linq</x:String>
      <x:String>System.Linq.Expressions</x:String>
      <x:String>System.Net</x:String>
      <x:String>System.Net.Mail</x:String>
      <x:String>System.Reflection</x:String>
      <x:String>System.Runtime.Serialization</x:String>
      <x:String>System.Text</x:String>
      <x:String>System.Text.RegularExpressions</x:String>
      <x:String>System.Windows.Markup</x:String>
      <x:String>System.Xml</x:String>
      <x:String>System.Xml.Linq</x:String>
      <x:String>UiPath.Core</x:String>
      <x:String>UiPath.Core.Activities</x:String>
      <x:String>UiPath.Mail</x:String>
      <x:String>UiPath.Mail.Activities</x:String>
      <x:String>UiPath.Mail.Activities.Business</x:String>
      <x:String>UiPath.Mail.Outlook.Activities</x:String>
      <x:String>UiPath.Shared.Activities</x:String>
      <x:String>Microsoft.Exchange.WebServices.Data</x:String>
      <x:String>UiPath.Mail.Exchange</x:String>
      <x:String>System.Security</x:String>
      <x:String>UiPath.Mail.Exchange.Activities</x:String>
    </sco:Collection>
  </TextExpression.NamespacesForImplementation>
  <TextExpression.ReferencesForImplementation>
    <sco:Collection x:TypeArguments="AssemblyReference">
      <AssemblyReference>Microsoft.CSharp</AssemblyReference>
      <AssemblyReference>System</AssemblyReference>
      <AssemblyReference>System.Linq</AssemblyReference>
      <AssemblyReference>System.Core</AssemblyReference>
      <AssemblyReference>System.Activities</AssemblyReference>
      <AssemblyReference>System.Data</AssemblyReference>
      <AssemblyReference>System.Data.Common</AssemblyReference>
      <AssemblyReference>System.Runtime.Serialization</AssemblyReference>
      <AssemblyReference>System.ServiceModel</AssemblyReference>
      <AssemblyReference>System.ServiceModel.Activities</AssemblyReference>
      <AssemblyReference>System.Xaml</AssemblyReference>
      <AssemblyReference>System.Activities</AssemblyReference>
      <AssemblyReference>Microsoft.VisualBasic</AssemblyReference>
      <AssemblyReference>System.Private.CoreLib</AssemblyReference>
      <AssemblyReference>System.Data</AssemblyReference>
      <AssemblyReference>System</AssemblyReference>
      <AssemblyReference>System.Core</AssemblyReference>
      <AssemblyReference>System.Xml</AssemblyReference>
      <AssemblyReference>System.Xml.Linq</AssemblyReference>
      <AssemblyReference>System.Xaml</AssemblyReference>
      <AssemblyReference>UiPath.System.Activities</AssemblyReference>
      <AssemblyReference>UiPath.UiAutomation.Activities</AssemblyReference>
      <AssemblyReference>UiPath.Studio.Constants</AssemblyReference>
      <AssemblyReference>System.Private.ServiceModel</AssemblyReference>
      <AssemblyReference>System.Runtime.Serialization.Formatters</AssemblyReference>
      <AssemblyReference>System.Private.DataContractSerialization</AssemblyReference>
      <AssemblyReference>System.Runtime.Serialization.Primitives</AssemblyReference>
      <AssemblyReference>System.Reflection.DispatchProxy</AssemblyReference>
      <AssemblyReference>System.Reflection.TypeExtensions</AssemblyReference>
      <AssemblyReference>System.ObjectModel</AssemblyReference>
      <AssemblyReference>System.Reflection.Metadata</AssemblyReference>
      <AssemblyReference>System.Collections</AssemblyReference>
      <AssemblyReference>System.Net.Primitives</AssemblyReference>
      <AssemblyReference>System.Net.HttpListener</AssemblyReference>
      <AssemblyReference>System.Net.WebProxy</AssemblyReference>
      <AssemblyReference>System.Net.NameResolution</AssemblyReference>
      <AssemblyReference>System.Net.WebClient</AssemblyReference>
      <AssemblyReference>System.Security.Permissions</AssemblyReference>
      <AssemblyReference>System.Net.Requests</AssemblyReference>
      <AssemblyReference>System.Net.ServicePoint</AssemblyReference>
      <AssemblyReference>System.Net.WebHeaderCollection</AssemblyReference>
      <AssemblyReference>NPOI</AssemblyReference>
      <AssemblyReference>System.Memory.Data</AssemblyReference>
      <AssemblyReference>System.ComponentModel.TypeConverter</AssemblyReference>
      <AssemblyReference>System.Console</AssemblyReference>
      <AssemblyReference>System.Configuration.ConfigurationManager</AssemblyReference>
      <AssemblyReference>System.ComponentModel</AssemblyReference>
      <AssemblyReference>System.Memory</AssemblyReference>
      <AssemblyReference>System.Private.Uri</AssemblyReference>
      <AssemblyReference>UiPath.Workflow</AssemblyReference>
      <AssemblyReference>UiPath.Mail.Activities</AssemblyReference>
      <AssemblyReference>UiPath.Mail</AssemblyReference>
      <AssemblyReference>UiPath.Mail.Activities.Design</AssemblyReference>
      <AssemblyReference>UiPath.Excel.Activities</AssemblyReference>
      <AssemblyReference>UiPath.Testing.Activities</AssemblyReference>
      <AssemblyReference>UiPath.OCR.Activities</AssemblyReference>
      <AssemblyReference>UiPath.UIAutomationCore</AssemblyReference>
      <AssemblyReference>System.Net.Mail</AssemblyReference>
      <AssemblyReference>System.Linq.Expressions</AssemblyReference>
      <AssemblyReference>System.Linq.Parallel</AssemblyReference>
      <AssemblyReference>System.Collections.Immutable</AssemblyReference>
      <AssemblyReference>System.Linq.Queryable</AssemblyReference>
      <AssemblyReference>System.Text.RegularExpressions</AssemblyReference>
      <AssemblyReference>UiPath.System.Activities.Design</AssemblyReference>
      <AssemblyReference>UiPath.System.Activities.ViewModels</AssemblyReference>
      <AssemblyReference>Microsoft.Exchange.WebServices</AssemblyReference>
      <AssemblyReference>System.Runtime.InteropServices</AssemblyReference>
    </sco:Collection>
  </TextExpression.ReferencesForImplementation>
  <Sequence sap2010:Annotation.AnnotationText="Each mail should served individually&#xA;&#xA;Hint: Mail should be marked as read only and only if procces performed successful or BE occured" DisplayName="Master Mail Iteration" sap:VirtualizedContainerService.HintSize="750.4,1621.6" sap2010:WorkflowViewState.IdRef="Sequence_11">
    <Sequence.Variables>
      <Variable x:TypeArguments="x:Int32" Name="i" />
    </Sequence.Variables>
    <sap:WorkflowViewStateService.ViewState>
      <scg:Dictionary x:TypeArguments="x:String, x:Object">
        <x:Boolean x:Key="IsExpanded">True</x:Boolean>
        <x:Boolean x:Key="IsPinned">False</x:Boolean>
        <x:Boolean x:Key="IsAnnotationDocked">True</x:Boolean>
      </scg:Dictionary>
    </sap:WorkflowViewStateService.ViewState>
    <ui:ForEach x:TypeArguments="snm:MailMessage" sap2010:Annotation.AnnotationText="For each mail check if the subject is know and classified then invoke the corrosponsing WF." DisplayName="For Each - Mail" sap:VirtualizedContainerService.HintSize="688,1449.6" sap2010:WorkflowViewState.IdRef="ForEach`1_2">
      <ui:ForEach.Body>
        <ActivityAction x:TypeArguments="snm:MailMessage">
          <ActivityAction.Argument>
            <DelegateInArgument x:TypeArguments="snm:MailMessage" Name="currentMailMessage" />
          </ActivityAction.Argument>
          <Sequence DisplayName="Body" sap:VirtualizedContainerService.HintSize="654.4,1230.4" sap2010:WorkflowViewState.IdRef="Sequence_17">
            <sap:WorkflowViewStateService.ViewState>
              <scg:Dictionary x:TypeArguments="x:String, x:Object">
                <x:Boolean x:Key="IsExpanded">True</x:Boolean>
              </scg:Dictionary>
            </sap:WorkflowViewStateService.ViewState>
            <TryCatch sap2010:Annotation.AnnotationText="Each mail should served individually&#xA;- if BE occured then log it only with warning level. [because it is related to received mail]&#xA;- SE only can be occured via the invoked - generic WF`s" DisplayName="Try Catch - Each Mail" sap:VirtualizedContainerService.HintSize="611.2,1140.8" sap2010:WorkflowViewState.IdRef="TryCatch_3">
              <TryCatch.Variables>
                <Variable x:TypeArguments="scg:Dictionary(x:String, x:Object)" Name="QueueItemInformation" />
              </TryCatch.Variables>
              <sap:WorkflowViewStateService.ViewState>
                <scg:Dictionary x:TypeArguments="x:String, x:Object">
                  <x:Boolean x:Key="IsAnnotationDocked">True</x:Boolean>
                  <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                  <x:Boolean x:Key="IsPinned">False</x:Boolean>
                </scg:Dictionary>
              </sap:WorkflowViewStateService.ViewState>
              <TryCatch.Try>
                <Sequence DisplayName="Mail handling" sap:VirtualizedContainerService.HintSize="574.4,826.4" sap2010:WorkflowViewState.IdRef="Sequence_45">
                  <Sequence.Variables>
                    <Variable x:TypeArguments="ui:BusinessRuleException" Name="BE" />
                  </Sequence.Variables>
                  <sap:WorkflowViewStateService.ViewState>
                    <scg:Dictionary x:TypeArguments="x:String, x:Object">
                      <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                    </scg:Dictionary>
                  </sap:WorkflowViewStateService.ViewState>
                  <ui:RetryScope sap2010:Annotation.AnnotationText="Read and validate" DisplayName="Retry Scope Actions" sap:VirtualizedContainerService.HintSize="512,84" sap2010:WorkflowViewState.IdRef="RetryScope_2">
                    <ui:RetryScope.ActivityBody>
                      <ActivityAction>
                        <Sequence sap2010:Annotation.AnnotationText="- Check Subject&#xA;- Invoke Corrosponding WF Related to Current Founded Code in Subject" DisplayName="Actions" sap:VirtualizedContainerService.HintSize="512,1258.4" sap2010:WorkflowViewState.IdRef="Sequence_46">
                          <Sequence.Variables>
                            <Variable x:TypeArguments="x:String" Name="TargetWF" />
                            <Variable x:TypeArguments="x:String" Name="TargetSheet" />
                          </Sequence.Variables>
                          <sap:WorkflowViewStateService.ViewState>
                            <scg:Dictionary x:TypeArguments="x:String, x:Object">
                              <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                              <x:Boolean x:Key="IsAnnotationDocked">True</x:Boolean>
                              <x:Boolean x:Key="IsPinned">False</x:Boolean>
                            </scg:Dictionary>
                          </sap:WorkflowViewStateService.ViewState>
                          <ui:LogMessage DisplayName="Start With" sap:VirtualizedContainerService.HintSize="449.6,92.8" sap2010:WorkflowViewState.IdRef="LogMessage_41" Level="Info">
                            <ui:LogMessage.Message>
                              <InArgument x:TypeArguments="x:Object">
                                <CSharpValue x:TypeArguments="x:Object" sap2010:WorkflowViewState.IdRef="CSharpValue`1_122">"Start with mail number ["+(i+1).ToString()+"/"+in_ListOfMails.Count.ToString()+"] from ["+currentMailMessage.Sender.Address+"] with subject ["+currentMailMessage.Subject+"]"</CSharpValue>
                              </InArgument>
                            </ui:LogMessage.Message>
                          </ui:LogMessage>
                          <Sequence sap2010:Annotation.AnnotationText="Invoke Corrosponding WF Related to Current Founded Code" DisplayName="Invoke WF" sap:VirtualizedContainerService.HintSize="449.6,969.6" sap2010:WorkflowViewState.IdRef="Sequence_47">
                            <sap:WorkflowViewStateService.ViewState>
                              <scg:Dictionary x:TypeArguments="x:String, x:Object">
                                <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                                <x:Boolean x:Key="IsAnnotationDocked">True</x:Boolean>
                                <x:Boolean x:Key="IsPinned">False</x:Boolean>
                              </scg:Dictionary>
                            </sap:WorkflowViewStateService.ViewState>
                            <ui:LogMessage DisplayName="Invoke Start" sap:VirtualizedContainerService.HintSize="387.2,92.8" sap2010:WorkflowViewState.IdRef="LogMessage_42" Level="Info">
                              <ui:LogMessage.Message>
                                <InArgument x:TypeArguments="x:Object">
                                  <CSharpValue x:TypeArguments="x:Object" sap2010:WorkflowViewState.IdRef="CSharpValue`1_123">"Invoke WF ["+TargetWF+"], Started"</CSharpValue>
                                </InArgument>
                              </ui:LogMessage.Message>
                            </ui:LogMessage>
                            <ui:InvokeWorkflowFile ArgumentsVariable="{x:Null}" ContinueOnError="{x:Null}" sap2010:Annotation.AnnotationText="Invoke target WF All Individual processes should only consist of 3 inputs args&#xA;- ProcessSpecialConfig&#xA;- in_Config --&gt; Config&#xA;- in_Mail --&gt; CurrentMail&#xA;&#xA;new Dictionary&lt;string,object&gt;()&#xA;{&#xA; {&quot;in_Config&quot;,in_Config},&#xA; {&quot;in_Mail&quot;,currentMailMessage},&#xA;{&quot;in_ProcessSpecialConfig&quot;,in_EachProcessSpecialConfig[TargetCode]}&#xA;}&#xA;&#xA;Notes:&#xA;- Any kind Of BE should be handled inside the invoked WF by sending warning mail.&#xA;- the invoked WF should rethrow SE in case of unpredictable exception occured. and then the current try-catch with send mail to Admin only or to email sender also if needed as configured in config file." DisplayName="Invoke Workflow File" sap:VirtualizedContainerService.HintSize="387.2,560.8" sap2010:WorkflowViewState.IdRef="InvokeWorkflowFile_9" UnSafe="False">
                              <ui:InvokeWorkflowFile.Arguments>
                                <InArgument x:TypeArguments="scg:Dictionary(x:String, x:Object)" x:Key="in_Config">
                                  <CSharpValue x:TypeArguments="scg:Dictionary(x:String, x:Object)" sap2010:WorkflowViewState.IdRef="CSharpValue`1_125">in_Config</CSharpValue>
                                </InArgument>
                                <InArgument x:TypeArguments="snm:MailMessage" x:Key="in_Mail">
                                  <CSharpValue x:TypeArguments="snm:MailMessage" sap2010:WorkflowViewState.IdRef="CSharpValue`1_126">currentMailMessage</CSharpValue>
                                </InArgument>
                                <OutArgument x:TypeArguments="ui:BusinessRuleException" x:Key="out_BE">
                                  <CSharpReference x:TypeArguments="ui:BusinessRuleException" sap2010:WorkflowViewState.IdRef="CSharpReference`1_13">BE</CSharpReference>
                                </OutArgument>
                                <OutArgument x:TypeArguments="scg:Dictionary(x:String, x:Object)" x:Key="out_KeyValuePairs">
                                  <CSharpReference x:TypeArguments="scg:Dictionary(x:String, x:Object)" sap2010:WorkflowViewState.IdRef="CSharpReference`1_16">QueueItemInformation</CSharpReference>
                                </OutArgument>
                              </ui:InvokeWorkflowFile.Arguments>
                              <sap:WorkflowViewStateService.ViewState>
                                <scg:Dictionary x:TypeArguments="x:String, x:Object">
                                  <x:Boolean x:Key="IsAnnotationDocked">True</x:Boolean>
                                  <x:Boolean x:Key="IsExpanded">False</x:Boolean>
                                  <x:Boolean x:Key="IsPinned">False</x:Boolean>
                                </scg:Dictionary>
                              </sap:WorkflowViewStateService.ViewState>
                              <ui:InvokeWorkflowFile.WorkflowFileName>
                                <InArgument x:TypeArguments="x:String">
                                  <CSharpValue x:TypeArguments="x:String" sap2010:WorkflowViewState.IdRef="CSharpValue`1_124">$"QueueDispatchers\\{in_Config[CurrentMailMessage.Subject.ToLower() + "Dispatcher"]}"</CSharpValue>
                                </InArgument>
                              </ui:InvokeWorkflowFile.WorkflowFileName>
                            </ui:InvokeWorkflowFile>
                            <ui:LogMessage DisplayName="Invoke Terminated" sap:VirtualizedContainerService.HintSize="387.2,92.8" sap2010:WorkflowViewState.IdRef="LogMessage_43" Level="Info">
                              <ui:LogMessage.Message>
                                <InArgument x:TypeArguments="x:Object">
                                  <CSharpValue x:TypeArguments="x:Object" sap2010:WorkflowViewState.IdRef="CSharpValue`1_127">"Invoke WF ["+TargetWF+"], Terminated Successfull"</CSharpValue>
                                </InArgument>
                              </ui:LogMessage.Message>
                            </ui:LogMessage>
                          </Sequence>
                        </Sequence>
                      </ActivityAction>
                    </ui:RetryScope.ActivityBody>
                    <ui:RetryScope.Condition>
                      <ActivityFunc x:TypeArguments="x:Boolean" />
                    </ui:RetryScope.Condition>
                    <sap:WorkflowViewStateService.ViewState>
                      <scg:Dictionary x:TypeArguments="x:String, x:Object">
                        <x:Boolean x:Key="IsExpanded">False</x:Boolean>
                        <x:Boolean x:Key="IsPinned">False</x:Boolean>
                        <x:Boolean x:Key="IsAnnotationDocked">True</x:Boolean>
                      </scg:Dictionary>
                    </sap:WorkflowViewStateService.ViewState>
                  </ui:RetryScope>
                  <Sequence sap2010:Annotation.AnnotationText="Send mail for each " DisplayName="Sequence handling success or business exception" sap:VirtualizedContainerService.HintSize="512,590.4" sap2010:WorkflowViewState.IdRef="Sequence_53">
                    <sap:WorkflowViewStateService.ViewState>
                      <scg:Dictionary x:TypeArguments="x:String, x:Object">
                        <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                        <x:Boolean x:Key="IsPinned">False</x:Boolean>
                        <x:Boolean x:Key="IsAnnotationDocked">True</x:Boolean>
                      </scg:Dictionary>
                    </sap:WorkflowViewStateService.ViewState>
                    <Sequence sap2010:Annotation.AnnotationText="-Mark Mail as read&#xA;- delete mail if necessary" DisplayName="Mark Mail As Read" sap:VirtualizedContainerService.HintSize="449.6,127.2" sap2010:WorkflowViewState.IdRef="Sequence_63">
                      <sap:WorkflowViewStateService.ViewState>
                        <scg:Dictionary x:TypeArguments="x:String, x:Object">
                          <x:Boolean x:Key="IsExpanded">False</x:Boolean>
                          <x:Boolean x:Key="IsPinned">False</x:Boolean>
                          <x:Boolean x:Key="IsAnnotationDocked">True</x:Boolean>
                        </scg:Dictionary>
                      </sap:WorkflowViewStateService.ViewState>
                      <ui:LogMessage DisplayName="Log Message - Warning" sap:VirtualizedContainerService.HintSize="387.2,92.8" sap2010:WorkflowViewState.IdRef="LogMessage_51" Level="Warn">
                        <ui:LogMessage.Message>
                          <InArgument x:TypeArguments="x:Object">
                            <CSharpValue x:TypeArguments="x:Object" sap2010:WorkflowViewState.IdRef="CSharpValue`1_142">BE.Message</CSharpValue>
                          </InArgument>
                        </ui:LogMessage.Message>
                      </ui:LogMessage>
                      <ui:LogMessage DisplayName="Log Message - Mark As Read" sap:VirtualizedContainerService.HintSize="387.2,92.8" sap2010:WorkflowViewState.IdRef="LogMessage_52" Level="Info">
                        <ui:LogMessage.Message>
                          <InArgument x:TypeArguments="x:Object">
                            <CSharpValue x:TypeArguments="x:Object" sap2010:WorkflowViewState.IdRef="CSharpValue`1_143">"Mark mail as read since BE is occured while classify the email [Unknown]"</CSharpValue>
                          </InArgument>
                        </ui:LogMessage.Message>
                      </ui:LogMessage>
                      <ui:MarkOutlookMailAsRead DisplayName="Mark Outlook Mail As Read/Unread" sap:VirtualizedContainerService.HintSize="387.2,144.8" sap2010:WorkflowViewState.IdRef="MarkOutlookMailAsRead_7" MarkAs="Read">
                        <ui:MarkOutlookMailAsRead.MailMessage>
                          <InArgument x:TypeArguments="snm:MailMessage">
                            <CSharpValue x:TypeArguments="snm:MailMessage" sap2010:WorkflowViewState.IdRef="CSharpValue`1_144">currentMailMessage</CSharpValue>
                          </InArgument>
                        </ui:MarkOutlookMailAsRead.MailMessage>
                      </ui:MarkOutlookMailAsRead>
                      <ui:LogMessage DisplayName="Log Message - Mark As Read Success" sap:VirtualizedContainerService.HintSize="387.2,92.8" sap2010:WorkflowViewState.IdRef="LogMessage_53" Level="Info">
                        <ui:LogMessage.Message>
                          <InArgument x:TypeArguments="x:Object">
                            <CSharpValue x:TypeArguments="x:Object" sap2010:WorkflowViewState.IdRef="CSharpValue`1_145">"Mail marked as read successfuly"</CSharpValue>
                          </InArgument>
                        </ui:LogMessage.Message>
                      </ui:LogMessage>
                      <If DisplayName="If - DeleteMailIfUnknown" sap:VirtualizedContainerService.HintSize="387.2,52.8" sap2010:WorkflowViewState.IdRef="If_14">
                        <If.Condition>
                          <InArgument x:TypeArguments="x:Boolean">
                            <CSharpValue x:TypeArguments="x:Boolean" sap2010:WorkflowViewState.IdRef="CSharpValue`1_146">in_Config["DeleteMailIfUnknown"].ToString().Equals("1")</CSharpValue>
                          </InArgument>
                        </If.Condition>
                        <sap:WorkflowViewStateService.ViewState>
                          <scg:Dictionary x:TypeArguments="x:String, x:Object">
                            <x:Boolean x:Key="IsExpanded">False</x:Boolean>
                            <x:Boolean x:Key="IsPinned">False</x:Boolean>
                          </scg:Dictionary>
                        </sap:WorkflowViewStateService.ViewState>
                        <If.Then>
                          <Sequence sap:VirtualizedContainerService.HintSize="376.8,415.2" sap2010:WorkflowViewState.IdRef="Sequence_61">
                            <sap:WorkflowViewStateService.ViewState>
                              <scg:Dictionary x:TypeArguments="x:String, x:Object">
                                <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                              </scg:Dictionary>
                            </sap:WorkflowViewStateService.ViewState>
                            <ui:LogMessage DisplayName="Log Message - Delete" sap:VirtualizedContainerService.HintSize="333.6,92.8" sap2010:WorkflowViewState.IdRef="LogMessage_54" Level="Info">
                              <ui:LogMessage.Message>
                                <InArgument x:TypeArguments="x:Object">
                                  <CSharpValue x:TypeArguments="x:Object" sap2010:WorkflowViewState.IdRef="CSharpValue`1_147" xml:space="preserve">"Delete unknow mail  ..."</CSharpValue>
                                </InArgument>
                              </ui:LogMessage.Message>
                            </ui:LogMessage>
                            <ui:DeleteMail ApplicationId="{x:Null}" DirectoryId="{x:Null}" Domain="{x:Null}" EmailAutodiscover="{x:Null}" Password="{x:Null}" SecurePassword="{x:Null}" Server="{x:Null}" TimeoutMS="{x:Null}" User="{x:Null}" AuthenticationMode="UserNameAndPassword" DeleteMode="MoveToDeletedItems" DisplayName="Delete Exchange Mail Message" ExchangeVersion="Exchange2007_SP1" sap:VirtualizedContainerService.HintSize="333.6,60" sap2010:WorkflowViewState.IdRef="DeleteMail_3">
                              <ui:DeleteMail.MailMessage>
                                <InArgument x:TypeArguments="snm:MailMessage">
                                  <CSharpValue x:TypeArguments="snm:MailMessage" sap2010:WorkflowViewState.IdRef="CSharpValue`1_148">currentMailMessage</CSharpValue>
                                </InArgument>
                              </ui:DeleteMail.MailMessage>
                            </ui:DeleteMail>
                            <ui:LogMessage DisplayName="Log Message - Delete" sap:VirtualizedContainerService.HintSize="333.6,92.8" sap2010:WorkflowViewState.IdRef="LogMessage_55" Level="Info">
                              <ui:LogMessage.Message>
                                <InArgument x:TypeArguments="x:Object">
                                  <CSharpValue x:TypeArguments="x:Object" sap2010:WorkflowViewState.IdRef="CSharpValue`1_149">"Mail deleted successful and moved to the trash"</CSharpValue>
                                </InArgument>
                              </ui:LogMessage.Message>
                            </ui:LogMessage>
                          </Sequence>
                        </If.Then>
                        <If.Else>
                          <Sequence sap2010:WorkflowViewState.IdRef="Sequence_62" />
                        </If.Else>
                      </If>
                    </Sequence>
                    <If sap2010:Annotation.AnnotationText="Mark mail as read and send email response&#xA;" DisplayName="If BE" sap:VirtualizedContainerService.HintSize="449.6,112.8" sap2010:WorkflowViewState.IdRef="If_12">
                      <If.Condition>
                        <InArgument x:TypeArguments="x:Boolean">
                          <CSharpValue x:TypeArguments="x:Boolean" sap2010:WorkflowViewState.IdRef="CSharpValue`1_150">BE != null</CSharpValue>
                        </InArgument>
                      </If.Condition>
                      <sap:WorkflowViewStateService.ViewState>
                        <scg:Dictionary x:TypeArguments="x:String, x:Object">
                          <x:Boolean x:Key="IsAnnotationDocked">True</x:Boolean>
                          <x:Boolean x:Key="IsExpanded">False</x:Boolean>
                          <x:Boolean x:Key="IsPinned">False</x:Boolean>
                        </scg:Dictionary>
                      </sap:WorkflowViewStateService.ViewState>
                      <If.Then>
                        <Sequence sap:VirtualizedContainerService.HintSize="492.8,194.4" sap2010:WorkflowViewState.IdRef="Sequence_65">
                          <sap:WorkflowViewStateService.ViewState>
                            <scg:Dictionary x:TypeArguments="x:String, x:Object">
                              <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                            </scg:Dictionary>
                          </sap:WorkflowViewStateService.ViewState>
                          <Sequence DisplayName="Send mail response BE" sap:VirtualizedContainerService.HintSize="449.6,104.8" sap2010:WorkflowViewState.IdRef="Sequence_64">
                            <sap:WorkflowViewStateService.ViewState>
                              <scg:Dictionary x:TypeArguments="x:String, x:Object">
                                <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                              </scg:Dictionary>
                            </sap:WorkflowViewStateService.ViewState>
                          </Sequence>
                        </Sequence>
                      </If.Then>
                      <If.Else>
                        <Sequence sap:VirtualizedContainerService.HintSize="492.8,428.8" sap2010:WorkflowViewState.IdRef="Sequence_60">
                          <Sequence.Variables>
                            <Variable x:TypeArguments="scg:Dictionary(x:String, x:Object)" Name="KeyValuePairs" />
                          </Sequence.Variables>
                          <sap:WorkflowViewStateService.ViewState>
                            <scg:Dictionary x:TypeArguments="x:String, x:Object">
                              <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                            </scg:Dictionary>
                          </sap:WorkflowViewStateService.ViewState>
                          <Sequence DisplayName="Send mail response success" sap:VirtualizedContainerService.HintSize="449.6,104.8" sap2010:WorkflowViewState.IdRef="Sequence_66">
                            <sap:WorkflowViewStateService.ViewState>
                              <scg:Dictionary x:TypeArguments="x:String, x:Object">
                                <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                              </scg:Dictionary>
                            </sap:WorkflowViewStateService.ViewState>
                          </Sequence>
                          <ui:AddQueueItem ServiceBaseAddress="{x:Null}" TimeoutMS="{x:Null}" DisplayName="Add Queue Item " sap:VirtualizedContainerService.HintSize="449.6,194.4" sap2010:WorkflowViewState.IdRef="AddQueueItem_1" Priority="Normal">
                            <ui:AddQueueItem.FolderPath>
                              <InArgument x:TypeArguments="x:String">
                                <CSharpValue x:TypeArguments="x:String" sap2010:WorkflowViewState.IdRef="CSharpValue`1_152">in_Config[CurrentMailMessage.Subject.ToLower() + "Folder"].ToString()</CSharpValue>
                              </InArgument>
                            </ui:AddQueueItem.FolderPath>
                            <ui:AddQueueItem.ItemInformation>
                              <scg:Dictionary x:TypeArguments="x:String, InArgument" />
                            </ui:AddQueueItem.ItemInformation>
                            <ui:AddQueueItem.ItemInformationCollection>
                              <InArgument x:TypeArguments="scg:Dictionary(x:String, x:Object)">
                                <CSharpValue x:TypeArguments="scg:Dictionary(x:String, x:Object)" sap2010:WorkflowViewState.IdRef="CSharpValue`1_154">QueueItemInformation</CSharpValue>
                              </InArgument>
                            </ui:AddQueueItem.ItemInformationCollection>
                            <ui:AddQueueItem.QueueType>
                              <InArgument x:TypeArguments="x:String">
                                <CSharpValue x:TypeArguments="x:String" sap2010:WorkflowViewState.IdRef="CSharpValue`1_151">in_Config[CurrentMailMessage.Subject.ToLower() + "Queue"].ToString()</CSharpValue>
                              </InArgument>
                            </ui:AddQueueItem.QueueType>
                          </ui:AddQueueItem>
                        </Sequence>
                      </If.Else>
                    </If>
                    <Sequence sap2010:Annotation.AnnotationText="if PerformOneMailPerTrigger" DisplayName="Break?" sap:VirtualizedContainerService.HintSize="449.6,114.4" sap2010:WorkflowViewState.IdRef="Sequence_69">
                      <sap:WorkflowViewStateService.ViewState>
                        <scg:Dictionary x:TypeArguments="x:String, x:Object">
                          <x:Boolean x:Key="IsExpanded">False</x:Boolean>
                          <x:Boolean x:Key="IsPinned">False</x:Boolean>
                          <x:Boolean x:Key="IsAnnotationDocked">True</x:Boolean>
                        </scg:Dictionary>
                      </sap:WorkflowViewStateService.ViewState>
                      <If DisplayName="If - PerformOneMailPerTrigger" sap:VirtualizedContainerService.HintSize="411.2,297.6" sap2010:WorkflowViewState.IdRef="If_13">
                        <If.Condition>
                          <InArgument x:TypeArguments="x:Boolean">
                            <CSharpValue x:TypeArguments="x:Boolean" sap2010:WorkflowViewState.IdRef="CSharpValue`1_153">in_Config["PerformOneMailPerTrigger"].ToString().Equals("1")</CSharpValue>
                          </InArgument>
                        </If.Condition>
                        <If.Then>
                          <Sequence sap:VirtualizedContainerService.HintSize="377.6,114.4" sap2010:WorkflowViewState.IdRef="Sequence_67">
                            <sap:WorkflowViewStateService.ViewState>
                              <scg:Dictionary x:TypeArguments="x:String, x:Object">
                                <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                              </scg:Dictionary>
                            </sap:WorkflowViewStateService.ViewState>
                            <ui:Break sap:VirtualizedContainerService.HintSize="334.4,24.8" sap2010:WorkflowViewState.IdRef="Break_4" />
                          </Sequence>
                        </If.Then>
                        <If.Else>
                          <Sequence sap2010:WorkflowViewState.IdRef="Sequence_68" />
                        </If.Else>
                      </If>
                    </Sequence>
                  </Sequence>
                </Sequence>
              </TryCatch.Try>
              <TryCatch.Catches>
                <Catch x:TypeArguments="s:Exception" sap:VirtualizedContainerService.HintSize="577.6,22.4" sap2010:WorkflowViewState.IdRef="Catch`1_4">
                  <sap:WorkflowViewStateService.ViewState>
                    <scg:Dictionary x:TypeArguments="x:String, x:Object">
                      <x:Boolean x:Key="IsExpanded">False</x:Boolean>
                      <x:Boolean x:Key="IsPinned">False</x:Boolean>
                    </scg:Dictionary>
                  </sap:WorkflowViewStateService.ViewState>
                  <ActivityAction x:TypeArguments="s:Exception">
                    <ActivityAction.Argument>
                      <DelegateInArgument x:TypeArguments="s:Exception" Name="exception" />
                    </ActivityAction.Argument>
                    <TryCatch sap2010:Annotation.AnnotationText="- Prepare HTML Body&#xA;- Send Mail To Admin With SE Details" DisplayName="Try Catch - Send mail To Admin" sap:VirtualizedContainerService.HintSize="433.6,231.2" sap2010:WorkflowViewState.IdRef="TryCatch_6">
                      <sap:WorkflowViewStateService.ViewState>
                        <scg:Dictionary x:TypeArguments="x:String, x:Object">
                          <x:Boolean x:Key="IsAnnotationDocked">True</x:Boolean>
                          <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                          <x:Boolean x:Key="IsPinned">False</x:Boolean>
                        </scg:Dictionary>
                      </sap:WorkflowViewStateService.ViewState>
                      <TryCatch.Try>
                        <Sequence sap2010:Annotation.AnnotationText="Send Mail to Admin" DisplayName="SE Occured" sap:VirtualizedContainerService.HintSize="473.6,1243.2" sap2010:WorkflowViewState.IdRef="Sequence_28">
                          <Sequence.Variables>
                            <Variable x:TypeArguments="s:Exception" Name="SE" />
                            <Variable x:TypeArguments="x:String" Name="HTMLBody" />
                          </Sequence.Variables>
                          <sap:WorkflowViewStateService.ViewState>
                            <scg:Dictionary x:TypeArguments="x:String, x:Object">
                              <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                              <x:Boolean x:Key="IsAnnotationDocked">True</x:Boolean>
                              <x:Boolean x:Key="IsPinned">False</x:Boolean>
                            </scg:Dictionary>
                          </sap:WorkflowViewStateService.ViewState>
                          <ui:LogMessage DisplayName="SE Error" sap:VirtualizedContainerService.HintSize="411.2,92.8" sap2010:WorkflowViewState.IdRef="LogMessage_32" Level="Error">
                            <ui:LogMessage.Message>
                              <InArgument x:TypeArguments="x:Object">
                                <CSharpValue x:TypeArguments="x:Object" sap2010:WorkflowViewState.IdRef="CSharpValue`1_81">exception.Message</CSharpValue>
                              </InArgument>
                            </ui:LogMessage.Message>
                          </ui:LogMessage>
                          <ui:LogMessage DisplayName="Send SE To Admin" sap:VirtualizedContainerService.HintSize="411.2,92.8" sap2010:WorkflowViewState.IdRef="LogMessage_33" Level="Info">
                            <ui:LogMessage.Message>
                              <InArgument x:TypeArguments="x:Object">
                                <CSharpValue x:TypeArguments="x:Object" sap2010:WorkflowViewState.IdRef="CSharpValue`1_82">"Invoke, send SE mail to admin"</CSharpValue>
                              </InArgument>
                            </ui:LogMessage.Message>
                          </ui:LogMessage>
                          <ui:InvokeWorkflowFile ArgumentsVariable="{x:Null}" ContinueOnError="{x:Null}" DisplayName="PrepareErrorAdminMail.xaml - Invoke Workflow File" sap:VirtualizedContainerService.HintSize="411.2,113.6" sap2010:WorkflowViewState.IdRef="InvokeWorkflowFile_6" UnSafe="False" WorkflowFileName="Mail\\HTML\\PrepareErrorAdminMail.xaml">
                            <ui:InvokeWorkflowFile.Arguments>
                              <InArgument x:TypeArguments="s:Exception" x:Key="in_SE">
                                <CSharpValue x:TypeArguments="s:Exception" sap2010:WorkflowViewState.IdRef="CSharpValue`1_86">exception</CSharpValue>
                              </InArgument>
                              <InArgument x:TypeArguments="ui:BusinessRuleException" x:Key="in_BE">
                                <CSharpValue x:TypeArguments="ui:BusinessRuleException" sap2010:WorkflowViewState.IdRef="CSharpValue`1_85">null</CSharpValue>
                              </InArgument>
                              <OutArgument x:TypeArguments="x:String" x:Key="out_HTMLBody">
                                <CSharpReference x:TypeArguments="x:String" sap2010:WorkflowViewState.IdRef="CSharpReference`1_10">HTMLBody</CSharpReference>
                              </OutArgument>
                              <InArgument x:TypeArguments="x:String" x:Key="in_RelatedProcess">
                                <CSharpValue x:TypeArguments="x:String" sap2010:WorkflowViewState.IdRef="CSharpValue`1_84">string.Empty</CSharpValue>
                              </InArgument>
                              <InArgument x:TypeArguments="scg:Dictionary(x:String, x:Object)" x:Key="in_Config">
                                <CSharpValue x:TypeArguments="scg:Dictionary(x:String, x:Object)" sap2010:WorkflowViewState.IdRef="CSharpValue`1_83">in_Config</CSharpValue>
                              </InArgument>
                            </ui:InvokeWorkflowFile.Arguments>
                          </ui:InvokeWorkflowFile>
                          <ui:InvokeWorkflowFile ArgumentsVariable="{x:Null}" ContinueOnError="{x:Null}" sap2010:Annotation.AnnotationText="Send SE Mail To Admin Only" DisplayName="SendMail.xaml - Invoke Workflow File" sap:VirtualizedContainerService.HintSize="411.2,144.8" sap2010:WorkflowViewState.IdRef="InvokeWorkflowFile_7" UnSafe="False" WorkflowFileName="Mail\\SendMail.xaml">
                            <ui:InvokeWorkflowFile.Arguments>
                              <InArgument x:TypeArguments="scg:Dictionary(x:String, x:Object)" x:Key="in_Config">
                                <CSharpValue x:TypeArguments="scg:Dictionary(x:String, x:Object)" sap2010:WorkflowViewState.IdRef="CSharpValue`1_91">in_Config</CSharpValue>
                              </InArgument>
                              <InArgument x:TypeArguments="scg:Dictionary(x:String, sn:NetworkCredential)" x:Key="in_Credentials" />
                              <OutArgument x:TypeArguments="s:Exception" x:Key="out_SE">
                                <CSharpReference x:TypeArguments="s:Exception" sap2010:WorkflowViewState.IdRef="CSharpReference`1_11">SE</CSharpReference>
                              </OutArgument>
                              <InArgument x:TypeArguments="x:String" x:Key="in_Subject">
                                <CSharpValue x:TypeArguments="x:String" sap2010:WorkflowViewState.IdRef="CSharpValue`1_90">in_Config["ErrorMailToAdmin"].ToString()</CSharpValue>
                              </InArgument>
                              <InArgument x:TypeArguments="x:String" x:Key="in_HTMLBody">
                                <CSharpValue x:TypeArguments="x:String" sap2010:WorkflowViewState.IdRef="CSharpValue`1_89">HTMLBody</CSharpValue>
                              </InArgument>
                              <InArgument x:TypeArguments="x:String" x:Key="in_DisplayName">
                                <CSharpValue x:TypeArguments="x:String" sap2010:WorkflowViewState.IdRef="CSharpValue`1_88">in_Config["AdminMailDisplayName"].ToString()</CSharpValue>
                              </InArgument>
                              <InArgument x:TypeArguments="x:String" x:Key="in_Address">
                                <CSharpValue x:TypeArguments="x:String" sap2010:WorkflowViewState.IdRef="CSharpValue`1_87">in_Config["AdminEmail"].ToString()</CSharpValue>
                              </InArgument>
                              <InArgument x:TypeArguments="x:String" x:Key="in_Cc" />
                              <InArgument x:TypeArguments="x:String" x:Key="in_Bcc" />
                            </ui:InvokeWorkflowFile.Arguments>
                            <sap:WorkflowViewStateService.ViewState>
                              <scg:Dictionary x:TypeArguments="x:String, x:Object">
                                <x:Boolean x:Key="IsAnnotationDocked">True</x:Boolean>
                              </scg:Dictionary>
                            </sap:WorkflowViewStateService.ViewState>
                          </ui:InvokeWorkflowFile>
                          <If DisplayName="If - SE Occured" sap:VirtualizedContainerService.HintSize="411.2,363.2" sap2010:WorkflowViewState.IdRef="If_6">
                            <If.Condition>
                              <InArgument x:TypeArguments="x:Boolean">
                                <CSharpValue x:TypeArguments="x:Boolean" sap2010:WorkflowViewState.IdRef="CSharpValue`1_92">SE!=null</CSharpValue>
                              </InArgument>
                            </If.Condition>
                            <sap:WorkflowViewStateService.ViewState>
                              <scg:Dictionary x:TypeArguments="x:String, x:Object">
                                <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                                <x:Boolean x:Key="IsPinned">False</x:Boolean>
                              </scg:Dictionary>
                            </sap:WorkflowViewStateService.ViewState>
                            <If.Then>
                              <Sequence sap:VirtualizedContainerService.HintSize="377.6,180" sap2010:WorkflowViewState.IdRef="Sequence_29">
                                <sap:WorkflowViewStateService.ViewState>
                                  <scg:Dictionary x:TypeArguments="x:String, x:Object">
                                    <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                                  </scg:Dictionary>
                                </sap:WorkflowViewStateService.ViewState>
                                <Throw DisplayName="Throw  SE" sap:VirtualizedContainerService.HintSize="334.4,90.4" sap2010:WorkflowViewState.IdRef="Throw_4">
                                  <InArgument x:TypeArguments="s:Exception">
                                    <CSharpValue x:TypeArguments="s:Exception" sap2010:WorkflowViewState.IdRef="CSharpValue`1_93">SE</CSharpValue>
                                  </InArgument>
                                </Throw>
                              </Sequence>
                            </If.Then>
                            <If.Else>
                              <Sequence sap2010:WorkflowViewState.IdRef="Sequence_30" />
                            </If.Else>
                          </If>
                          <ui:LogMessage DisplayName="Send SE To Admin success" sap:VirtualizedContainerService.HintSize="411.2,92.8" sap2010:WorkflowViewState.IdRef="LogMessage_34" Level="Info">
                            <ui:LogMessage.Message>
                              <InArgument x:TypeArguments="x:Object">
                                <CSharpValue x:TypeArguments="x:Object" sap2010:WorkflowViewState.IdRef="CSharpValue`1_94">"Invoke, send SE mail to admin terminated successful"</CSharpValue>
                              </InArgument>
                            </ui:LogMessage.Message>
                          </ui:LogMessage>
                        </Sequence>
                      </TryCatch.Try>
                      <TryCatch.Catches>
                        <Catch x:TypeArguments="s:Exception" sap:VirtualizedContainerService.HintSize="400,22.4" sap2010:WorkflowViewState.IdRef="Catch`1_8">
                          <sap:WorkflowViewStateService.ViewState>
                            <scg:Dictionary x:TypeArguments="x:String, x:Object">
                              <x:Boolean x:Key="IsExpanded">False</x:Boolean>
                              <x:Boolean x:Key="IsPinned">False</x:Boolean>
                            </scg:Dictionary>
                          </sap:WorkflowViewStateService.ViewState>
                          <ActivityAction x:TypeArguments="s:Exception">
                            <ActivityAction.Argument>
                              <DelegateInArgument x:TypeArguments="s:Exception" Name="exception" />
                            </ActivityAction.Argument>
                            <ui:LogMessage DisplayName="Fatal Error While Sending Mail" sap:VirtualizedContainerService.HintSize="333.6,92.8" sap2010:WorkflowViewState.IdRef="LogMessage_35" Level="Fatal">
                              <ui:LogMessage.Message>
                                <InArgument x:TypeArguments="x:Object">
                                  <CSharpValue x:TypeArguments="x:Object" sap2010:WorkflowViewState.IdRef="CSharpValue`1_95">exception.Message</CSharpValue>
                                </InArgument>
                              </ui:LogMessage.Message>
                            </ui:LogMessage>
                          </ActivityAction>
                        </Catch>
                      </TryCatch.Catches>
                    </TryCatch>
                  </ActivityAction>
                </Catch>
                <Catch x:TypeArguments="ui:BusinessRuleException" sap:VirtualizedContainerService.HintSize="577.6,22.4" sap2010:WorkflowViewState.IdRef="Catch`1_5">
                  <sap:WorkflowViewStateService.ViewState>
                    <scg:Dictionary x:TypeArguments="x:String, x:Object">
                      <x:Boolean x:Key="IsExpanded">False</x:Boolean>
                      <x:Boolean x:Key="IsPinned">False</x:Boolean>
                    </scg:Dictionary>
                  </sap:WorkflowViewStateService.ViewState>
                  <ActivityAction x:TypeArguments="ui:BusinessRuleException">
                    <ActivityAction.Argument>
                      <DelegateInArgument x:TypeArguments="ui:BusinessRuleException" Name="exception" />
                    </ActivityAction.Argument>
                    <TryCatch sap2010:Annotation.AnnotationText="If unpredictable exception occured then log and send to admin" DisplayName="Try Catch - BE" sap:VirtualizedContainerService.HintSize="526.4,1474.4" sap2010:WorkflowViewState.IdRef="TryCatch_4">
                      <sap:WorkflowViewStateService.ViewState>
                        <scg:Dictionary x:TypeArguments="x:String, x:Object">
                          <x:Boolean x:Key="IsAnnotationDocked">True</x:Boolean>
                          <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                          <x:Boolean x:Key="IsPinned">False</x:Boolean>
                        </scg:Dictionary>
                      </sap:WorkflowViewStateService.ViewState>
                      <TryCatch.Try>
                        <Sequence sap2010:Annotation.AnnotationText="-Mark Mail as read&#xA;- delete mail if necessary" DisplayName="Mark Mail As Read" sap:VirtualizedContainerService.HintSize="472.8,1337.6" sap2010:WorkflowViewState.IdRef="Sequence_24">
                          <sap:WorkflowViewStateService.ViewState>
                            <scg:Dictionary x:TypeArguments="x:String, x:Object">
                              <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                              <x:Boolean x:Key="IsPinned">False</x:Boolean>
                              <x:Boolean x:Key="IsAnnotationDocked">True</x:Boolean>
                            </scg:Dictionary>
                          </sap:WorkflowViewStateService.ViewState>
                          <ui:LogMessage DisplayName="Log Message - Warning" sap:VirtualizedContainerService.HintSize="410.4,92.8" sap2010:WorkflowViewState.IdRef="LogMessage_22" Level="Warn">
                            <ui:LogMessage.Message>
                              <InArgument x:TypeArguments="x:Object">
                                <CSharpValue x:TypeArguments="x:Object" sap2010:WorkflowViewState.IdRef="CSharpValue`1_52">exception.Message</CSharpValue>
                              </InArgument>
                            </ui:LogMessage.Message>
                          </ui:LogMessage>
                          <ui:LogMessage DisplayName="Log Message - Mark As Read" sap:VirtualizedContainerService.HintSize="410.4,92.8" sap2010:WorkflowViewState.IdRef="LogMessage_23" Level="Info">
                            <ui:LogMessage.Message>
                              <InArgument x:TypeArguments="x:Object">
                                <CSharpValue x:TypeArguments="x:Object" sap2010:WorkflowViewState.IdRef="CSharpValue`1_53">"Mark mail as read since BE is occured while classify the email [Unknown]"</CSharpValue>
                              </InArgument>
                            </ui:LogMessage.Message>
                          </ui:LogMessage>
                          <ui:MarkOutlookMailAsRead DisplayName="Mark Outlook Mail As Read/Unread" sap:VirtualizedContainerService.HintSize="410.4,144.8" sap2010:WorkflowViewState.IdRef="MarkOutlookMailAsRead_3" MarkAs="Read">
                            <ui:MarkOutlookMailAsRead.MailMessage>
                              <InArgument x:TypeArguments="snm:MailMessage">
                                <CSharpValue x:TypeArguments="snm:MailMessage" sap2010:WorkflowViewState.IdRef="CSharpValue`1_133">currentMailMessage</CSharpValue>
                              </InArgument>
                            </ui:MarkOutlookMailAsRead.MailMessage>
                          </ui:MarkOutlookMailAsRead>
                          <ui:LogMessage DisplayName="Log Message - Mark As Read Success" sap:VirtualizedContainerService.HintSize="410.4,92.8" sap2010:WorkflowViewState.IdRef="LogMessage_24" Level="Info">
                            <ui:LogMessage.Message>
                              <InArgument x:TypeArguments="x:Object">
                                <CSharpValue x:TypeArguments="x:Object" sap2010:WorkflowViewState.IdRef="CSharpValue`1_55">"Mail marked as read successfuly"</CSharpValue>
                              </InArgument>
                            </ui:LogMessage.Message>
                          </ui:LogMessage>
                          <If DisplayName="If - DeleteMailIfUnknown" sap:VirtualizedContainerService.HintSize="410.4,598.4" sap2010:WorkflowViewState.IdRef="If_4">
                            <If.Condition>
                              <InArgument x:TypeArguments="x:Boolean">
                                <CSharpValue x:TypeArguments="x:Boolean" sap2010:WorkflowViewState.IdRef="CSharpValue`1_56">in_Config["DeleteMailIfUnknown"].ToString().Equals("1")</CSharpValue>
                              </InArgument>
                            </If.Condition>
                            <sap:WorkflowViewStateService.ViewState>
                              <scg:Dictionary x:TypeArguments="x:String, x:Object">
                                <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                                <x:Boolean x:Key="IsPinned">False</x:Boolean>
                              </scg:Dictionary>
                            </sap:WorkflowViewStateService.ViewState>
                            <If.Then>
                              <Sequence sap:VirtualizedContainerService.HintSize="376.8,415.2" sap2010:WorkflowViewState.IdRef="Sequence_22">
                                <sap:WorkflowViewStateService.ViewState>
                                  <scg:Dictionary x:TypeArguments="x:String, x:Object">
                                    <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                                  </scg:Dictionary>
                                </sap:WorkflowViewStateService.ViewState>
                                <ui:LogMessage DisplayName="Log Message - Delete" sap:VirtualizedContainerService.HintSize="333.6,92.8" sap2010:WorkflowViewState.IdRef="LogMessage_25" Level="Info">
                                  <ui:LogMessage.Message>
                                    <InArgument x:TypeArguments="x:Object">
                                      <CSharpValue x:TypeArguments="x:Object" sap2010:WorkflowViewState.IdRef="CSharpValue`1_57" xml:space="preserve">"Delete unknow mail  ..."</CSharpValue>
                                    </InArgument>
                                  </ui:LogMessage.Message>
                                </ui:LogMessage>
                                <ui:DeleteMail ApplicationId="{x:Null}" DirectoryId="{x:Null}" Domain="{x:Null}" EmailAutodiscover="{x:Null}" Password="{x:Null}" SecurePassword="{x:Null}" Server="{x:Null}" TimeoutMS="{x:Null}" User="{x:Null}" AuthenticationMode="UserNameAndPassword" DeleteMode="MoveToDeletedItems" DisplayName="Delete Exchange Mail Message" ExchangeVersion="Exchange2007_SP1" sap:VirtualizedContainerService.HintSize="333.6,60" sap2010:WorkflowViewState.IdRef="DeleteMail_1">
                                  <ui:DeleteMail.MailMessage>
                                    <InArgument x:TypeArguments="snm:MailMessage">
                                      <CSharpValue x:TypeArguments="snm:MailMessage" sap2010:WorkflowViewState.IdRef="CSharpValue`1_108">currentMailMessage</CSharpValue>
                                    </InArgument>
                                  </ui:DeleteMail.MailMessage>
                                </ui:DeleteMail>
                                <ui:LogMessage DisplayName="Log Message - Delete" sap:VirtualizedContainerService.HintSize="333.6,92.8" sap2010:WorkflowViewState.IdRef="LogMessage_26" Level="Info">
                                  <ui:LogMessage.Message>
                                    <InArgument x:TypeArguments="x:Object">
                                      <CSharpValue x:TypeArguments="x:Object" sap2010:WorkflowViewState.IdRef="CSharpValue`1_59">"Mail deleted successful and moved to the trash"</CSharpValue>
                                    </InArgument>
                                  </ui:LogMessage.Message>
                                </ui:LogMessage>
                              </Sequence>
                            </If.Then>
                            <If.Else>
                              <Sequence sap2010:WorkflowViewState.IdRef="Sequence_23" />
                            </If.Else>
                          </If>
                        </Sequence>
                      </TryCatch.Try>
                      <TryCatch.Catches>
                        <Catch x:TypeArguments="s:Exception" sap:VirtualizedContainerService.HintSize="492.8,22.4" sap2010:WorkflowViewState.IdRef="Catch`1_6">
                          <sap:WorkflowViewStateService.ViewState>
                            <scg:Dictionary x:TypeArguments="x:String, x:Object">
                              <x:Boolean x:Key="IsExpanded">False</x:Boolean>
                              <x:Boolean x:Key="IsPinned">False</x:Boolean>
                            </scg:Dictionary>
                          </sap:WorkflowViewStateService.ViewState>
                          <ActivityAction x:TypeArguments="s:Exception">
                            <ActivityAction.Argument>
                              <DelegateInArgument x:TypeArguments="s:Exception" Name="exception" />
                            </ActivityAction.Argument>
                            <TryCatch sap2010:Annotation.AnnotationText="- Prepare HTML Body&#xA;- Send Mail To Admin With SE Details" DisplayName="Try Catch - Send mail To Admin" sap:VirtualizedContainerService.HintSize="486.4,1208" sap2010:WorkflowViewState.IdRef="TryCatch_5">
                              <sap:WorkflowViewStateService.ViewState>
                                <scg:Dictionary x:TypeArguments="x:String, x:Object">
                                  <x:Boolean x:Key="IsAnnotationDocked">True</x:Boolean>
                                  <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                                  <x:Boolean x:Key="IsPinned">False</x:Boolean>
                                </scg:Dictionary>
                              </sap:WorkflowViewStateService.ViewState>
                              <TryCatch.Try>
                                <Sequence sap2010:Annotation.AnnotationText="Send Mail to Admin" DisplayName="SE Occured" sap:VirtualizedContainerService.HintSize="449.6,932.8" sap2010:WorkflowViewState.IdRef="Sequence_25">
                                  <Sequence.Variables>
                                    <Variable x:TypeArguments="s:Exception" Name="SE" />
                                    <Variable x:TypeArguments="x:String" Name="HTMLBody" />
                                  </Sequence.Variables>
                                  <sap:WorkflowViewStateService.ViewState>
                                    <scg:Dictionary x:TypeArguments="x:String, x:Object">
                                      <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                                      <x:Boolean x:Key="IsAnnotationDocked">True</x:Boolean>
                                      <x:Boolean x:Key="IsPinned">False</x:Boolean>
                                    </scg:Dictionary>
                                  </sap:WorkflowViewStateService.ViewState>
                                  <ui:LogMessage DisplayName="SE" sap:VirtualizedContainerService.HintSize="387.2,92.8" sap2010:WorkflowViewState.IdRef="LogMessage_27" Level="Error">
                                    <ui:LogMessage.Message>
                                      <InArgument x:TypeArguments="x:Object">
                                        <CSharpValue x:TypeArguments="x:Object" sap2010:WorkflowViewState.IdRef="CSharpValue`1_60">"Unpredictable error occured while perform BE actions on current mail, details : " + exception.Message</CSharpValue>
                                      </InArgument>
                                    </ui:LogMessage.Message>
                                  </ui:LogMessage>
                                  <ui:LogMessage DisplayName="Send SE To Admin" sap:VirtualizedContainerService.HintSize="387.2,92.8" sap2010:WorkflowViewState.IdRef="LogMessage_29" Level="Info">
                                    <ui:LogMessage.Message>
                                      <InArgument x:TypeArguments="x:Object">
                                        <CSharpValue x:TypeArguments="x:Object" sap2010:WorkflowViewState.IdRef="CSharpValue`1_62">"Invoke, send SE mail to admin"</CSharpValue>
                                      </InArgument>
                                    </ui:LogMessage.Message>
                                  </ui:LogMessage>
                                  <ui:InvokeWorkflowFile ArgumentsVariable="{x:Null}" ContinueOnError="{x:Null}" DisplayName="PrepareErrorAdminMail.xaml - Invoke Workflow File" sap:VirtualizedContainerService.HintSize="387.2,113.6" sap2010:WorkflowViewState.IdRef="InvokeWorkflowFile_4" UnSafe="False" WorkflowFileName="Mail\\HTML\\PrepareErrorAdminMail.xaml">
                                    <ui:InvokeWorkflowFile.Arguments>
                                      <InArgument x:TypeArguments="s:Exception" x:Key="in_SE">
                                        <CSharpValue x:TypeArguments="s:Exception" sap2010:WorkflowViewState.IdRef="CSharpValue`1_63">exception</CSharpValue>
                                      </InArgument>
                                      <InArgument x:TypeArguments="ui:BusinessRuleException" x:Key="in_BE">
                                        <CSharpValue x:TypeArguments="ui:BusinessRuleException" sap2010:WorkflowViewState.IdRef="CSharpValue`1_64">null</CSharpValue>
                                      </InArgument>
                                      <OutArgument x:TypeArguments="x:String" x:Key="out_HTMLBody">
                                        <CSharpReference x:TypeArguments="x:String" sap2010:WorkflowViewState.IdRef="CSharpReference`1_8">HTMLBody</CSharpReference>
                                      </OutArgument>
                                      <InArgument x:TypeArguments="x:String" x:Key="in_RelatedProcess">
                                        <CSharpValue x:TypeArguments="x:String" sap2010:WorkflowViewState.IdRef="CSharpValue`1_65">string.Empty</CSharpValue>
                                      </InArgument>
                                      <InArgument x:TypeArguments="scg:Dictionary(x:String, x:Object)" x:Key="in_Config">
                                        <CSharpValue x:TypeArguments="scg:Dictionary(x:String, x:Object)" sap2010:WorkflowViewState.IdRef="CSharpValue`1_76">in_Config</CSharpValue>
                                      </InArgument>
                                    </ui:InvokeWorkflowFile.Arguments>
                                  </ui:InvokeWorkflowFile>
                                  <ui:InvokeWorkflowFile ArgumentsVariable="{x:Null}" ContinueOnError="{x:Null}" sap2010:Annotation.AnnotationText="Send SE Mail To Admin Only" DisplayName="SendMail.xaml - Invoke Workflow File" sap:VirtualizedContainerService.HintSize="387.2,144.8" sap2010:WorkflowViewState.IdRef="InvokeWorkflowFile_5" UnSafe="False" WorkflowFileName="Mail\\SendMail.xaml">
                                    <ui:InvokeWorkflowFile.Arguments>
                                      <InArgument x:TypeArguments="scg:Dictionary(x:String, x:Object)" x:Key="in_Config">
                                        <CSharpValue x:TypeArguments="scg:Dictionary(x:String, x:Object)" sap2010:WorkflowViewState.IdRef="CSharpValue`1_80">in_Config</CSharpValue>
                                      </InArgument>
                                      <InArgument x:TypeArguments="scg:Dictionary(x:String, sn:NetworkCredential)" x:Key="in_Credentials" />
                                      <OutArgument x:TypeArguments="s:Exception" x:Key="out_SE">
                                        <CSharpReference x:TypeArguments="s:Exception" sap2010:WorkflowViewState.IdRef="CSharpReference`1_9">SE</CSharpReference>
                                      </OutArgument>
                                      <InArgument x:TypeArguments="x:String" x:Key="in_Subject">
                                        <CSharpValue x:TypeArguments="x:String" sap2010:WorkflowViewState.IdRef="CSharpValue`1_79">in_Config["ErrorMailToAdmin"].ToString()</CSharpValue>
                                      </InArgument>
                                      <InArgument x:TypeArguments="x:String" x:Key="in_HTMLBody">
                                        <CSharpValue x:TypeArguments="x:String" sap2010:WorkflowViewState.IdRef="CSharpValue`1_69">HTMLBody</CSharpValue>
                                      </InArgument>
                                      <InArgument x:TypeArguments="x:String" x:Key="in_DisplayName">
                                        <CSharpValue x:TypeArguments="x:String" sap2010:WorkflowViewState.IdRef="CSharpValue`1_78">in_Config["AdminMailDisplayName"].ToString()</CSharpValue>
                                      </InArgument>
                                      <InArgument x:TypeArguments="x:String" x:Key="in_Address">
                                        <CSharpValue x:TypeArguments="x:String" sap2010:WorkflowViewState.IdRef="CSharpValue`1_77">in_Config["AdminEmail"].ToString()</CSharpValue>
                                      </InArgument>
                                      <InArgument x:TypeArguments="x:String" x:Key="in_Cc" />
                                      <InArgument x:TypeArguments="x:String" x:Key="in_Bcc" />
                                    </ui:InvokeWorkflowFile.Arguments>
                                    <sap:WorkflowViewStateService.ViewState>
                                      <scg:Dictionary x:TypeArguments="x:String, x:Object">
                                        <x:Boolean x:Key="IsAnnotationDocked">True</x:Boolean>
                                      </scg:Dictionary>
                                    </sap:WorkflowViewStateService.ViewState>
                                  </ui:InvokeWorkflowFile>
                                  <If DisplayName="If - SE Occured" sap:VirtualizedContainerService.HintSize="387.2,52.8" sap2010:WorkflowViewState.IdRef="If_5">
                                    <If.Condition>
                                      <InArgument x:TypeArguments="x:Boolean">
                                        <CSharpValue x:TypeArguments="x:Boolean" sap2010:WorkflowViewState.IdRef="CSharpValue`1_72">SE!=null</CSharpValue>
                                      </InArgument>
                                    </If.Condition>
                                    <sap:WorkflowViewStateService.ViewState>
                                      <scg:Dictionary x:TypeArguments="x:String, x:Object">
                                        <x:Boolean x:Key="IsExpanded">False</x:Boolean>
                                        <x:Boolean x:Key="IsPinned">False</x:Boolean>
                                      </scg:Dictionary>
                                    </sap:WorkflowViewStateService.ViewState>
                                    <If.Then>
                                      <Sequence sap:VirtualizedContainerService.HintSize="376,178" sap2010:WorkflowViewState.IdRef="Sequence_26">
                                        <sap:WorkflowViewStateService.ViewState>
                                          <scg:Dictionary x:TypeArguments="x:String, x:Object">
                                            <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                                          </scg:Dictionary>
                                        </sap:WorkflowViewStateService.ViewState>
                                        <Throw DisplayName="Throw  SE" sap:VirtualizedContainerService.HintSize="334,90" sap2010:WorkflowViewState.IdRef="Throw_3">
                                          <InArgument x:TypeArguments="s:Exception">
                                            <CSharpValue x:TypeArguments="s:Exception" sap2010:WorkflowViewState.IdRef="CSharpValue`1_73">SE</CSharpValue>
                                          </InArgument>
                                        </Throw>
                                      </Sequence>
                                    </If.Then>
                                    <If.Else>
                                      <Sequence sap2010:WorkflowViewState.IdRef="Sequence_27" />
                                    </If.Else>
                                  </If>
                                  <ui:LogMessage DisplayName="Send SE To Admin success" sap:VirtualizedContainerService.HintSize="387.2,92.8" sap2010:WorkflowViewState.IdRef="LogMessage_30" Level="Info">
                                    <ui:LogMessage.Message>
                                      <InArgument x:TypeArguments="x:Object">
                                        <CSharpValue x:TypeArguments="x:Object" sap2010:WorkflowViewState.IdRef="CSharpValue`1_74">"Invoke, send SE mail to admin terminated successful"</CSharpValue>
                                      </InArgument>
                                    </ui:LogMessage.Message>
                                  </ui:LogMessage>
                                </Sequence>
                              </TryCatch.Try>
                              <TryCatch.Catches>
                                <Catch x:TypeArguments="s:Exception" sap:VirtualizedContainerService.HintSize="452.8,22.4" sap2010:WorkflowViewState.IdRef="Catch`1_7">
                                  <sap:WorkflowViewStateService.ViewState>
                                    <scg:Dictionary x:TypeArguments="x:String, x:Object">
                                      <x:Boolean x:Key="IsExpanded">False</x:Boolean>
                                      <x:Boolean x:Key="IsPinned">False</x:Boolean>
                                    </scg:Dictionary>
                                  </sap:WorkflowViewStateService.ViewState>
                                  <ActivityAction x:TypeArguments="s:Exception">
                                    <ActivityAction.Argument>
                                      <DelegateInArgument x:TypeArguments="s:Exception" Name="exception" />
                                    </ActivityAction.Argument>
                                    <ui:LogMessage DisplayName="Fatal Error While Sending Mail" sap:VirtualizedContainerService.HintSize="334,92" sap2010:WorkflowViewState.IdRef="LogMessage_31" Level="Fatal">
                                      <ui:LogMessage.Message>
                                        <InArgument x:TypeArguments="x:Object">
                                          <CSharpValue x:TypeArguments="x:Object" sap2010:WorkflowViewState.IdRef="CSharpValue`1_75">exception.Message</CSharpValue>
                                        </InArgument>
                                      </ui:LogMessage.Message>
                                    </ui:LogMessage>
                                  </ActivityAction>
                                </Catch>
                              </TryCatch.Catches>
                            </TryCatch>
                          </ActivityAction>
                        </Catch>
                      </TryCatch.Catches>
                    </TryCatch>
                  </ActivityAction>
                </Catch>
              </TryCatch.Catches>
            </TryCatch>
          </Sequence>
        </ActivityAction>
      </ui:ForEach.Body>
      <ui:ForEach.CurrentIndex>
        <OutArgument x:TypeArguments="x:Int32">
          <CSharpReference x:TypeArguments="x:Int32" sap2010:WorkflowViewState.IdRef="CSharpReference`1_7">i</CSharpReference>
        </OutArgument>
      </ui:ForEach.CurrentIndex>
      <ui:ForEach.Values>
        <InArgument x:TypeArguments="sc:IEnumerable">
          <CSharpValue x:TypeArguments="sc:IEnumerable" sap2010:WorkflowViewState.IdRef="CSharpValue`1_27">in_ListOfMails</CSharpValue>
        </InArgument>
      </ui:ForEach.Values>
      <sap:WorkflowViewStateService.ViewState>
        <scg:Dictionary x:TypeArguments="x:String, x:Object">
          <x:Boolean x:Key="IsAnnotationDocked">True</x:Boolean>
          <x:Boolean x:Key="IsExpanded">True</x:Boolean>
          <x:Boolean x:Key="IsPinned">False</x:Boolean>
        </scg:Dictionary>
      </sap:WorkflowViewStateService.ViewState>
    </ui:ForEach>
  </Sequence>
</Activity>